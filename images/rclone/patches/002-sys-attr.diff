diff --git a/backend/amazonclouddrive/amazonclouddrive.go b/backend/amazonclouddrive/amazonclouddrive.go
index 12858a20..292045be 100644
--- a/backend/amazonclouddrive/amazonclouddrive.go
+++ b/backend/amazonclouddrive/amazonclouddrive.go
@@ -1017,6 +1017,16 @@ func (o *Object) Size() int64 {
 	return 0 // Object is likely PENDING
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // readMetaData gets the metadata if it hasn't already been fetched
 //
 // it also sets the info
@@ -1069,10 +1079,10 @@ func (o *Object) ModTime() time.Time {
 	return modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	// FIXME not implemented
-	return fs.ErrorCantSetModTime
+	return fs.ErrorCantSetMeta
 }
 
 // Storable returns a boolean showing whether this object storable
diff --git a/backend/azureblob/azureblob.go b/backend/azureblob/azureblob.go
index 9f71653f..bf99351d 100644
--- a/backend/azureblob/azureblob.go
+++ b/backend/azureblob/azureblob.go
@@ -899,6 +899,16 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 func (o *Object) setMetadata(metadata azblob.Metadata) {
 	if len(metadata) > 0 {
 		o.meta = metadata
@@ -1021,8 +1031,8 @@ func (o *Object) ModTime() (result time.Time) {
 	return o.modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	// Make sure o.meta is not nil
 	if o.meta == nil {
 		o.meta = make(map[string]string, 1)
diff --git a/backend/b2/b2.go b/backend/b2/b2.go
index 77c2c527..04f580e7 100644
--- a/backend/b2/b2.go
+++ b/backend/b2/b2.go
@@ -1079,6 +1079,16 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // decodeMetaDataRaw sets the metadata from the data passed in
 //
 // Sets
@@ -1199,10 +1209,10 @@ func (o *Object) ModTime() (result time.Time) {
 	return o.modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	// Not possible with B2
-	return fs.ErrorCantSetModTime
+	return fs.ErrorCantSetMeta
 }
 
 // Storable returns if this object is storable
diff --git a/backend/box/box.go b/backend/box/box.go
index 1837339a..40c42118 100644
--- a/backend/box/box.go
+++ b/backend/box/box.go
@@ -945,6 +945,16 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // setMetaData sets the metadata from info
 func (o *Object) setMetaData(info *api.Item) (err error) {
 	if info.Type != api.ItemTypeFile {
@@ -1010,8 +1020,8 @@ func (o *Object) setModTime(modTime time.Time) (*api.Item, error) {
 	return info, err
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	info, err := o.setModTime(modTime)
 	if err != nil {
 		return err
diff --git a/backend/cache/cache_internal_test.go b/backend/cache/cache_internal_test.go
index 3f0a69f6..c78493f8 100644
--- a/backend/cache/cache_internal_test.go
+++ b/backend/cache/cache_internal_test.go
@@ -673,7 +673,7 @@ func TestInternalChangeSeenAfterDirCacheFlush(t *testing.T) {
 	o, err := cfs.UnWrap().NewObject(runInstance.encryptRemoteIfNeeded(t, "data.bin"))
 	require.NoError(t, err)
 	wrappedTime := time.Now().Add(-1 * time.Hour)
-	err = o.SetModTime(wrappedTime)
+	err = o.SetMeta(wrappedTime, wrappedTime, nil)
 	require.NoError(t, err)
 
 	// get a new instance from the cache
@@ -716,7 +716,7 @@ func TestInternalChangeSeenAfterRc(t *testing.T) {
 	o, err := cfs.UnWrap().NewObject(runInstance.encryptRemoteIfNeeded(t, "data.bin"))
 	require.NoError(t, err)
 	wrappedTime := time.Now().Add(-1 * time.Hour)
-	err = o.SetModTime(wrappedTime)
+	err = o.SetMeta(wrappedTime, wrappedTime, nil)
 	require.NoError(t, err)
 
 	// get a new instance from the cache
diff --git a/backend/cache/directory.go b/backend/cache/directory.go
index 877313d5..7f771517 100644
--- a/backend/cache/directory.go
+++ b/backend/cache/directory.go
@@ -17,6 +17,7 @@ type Directory struct {
 	Name         string `json:"name"`    // name of the directory
 	Dir          string `json:"dir"`     // abs path of the directory
 	CacheModTime int64  `json:"modTime"` // modification or creation time - IsZero for unknown
+	CacheChgTime int64  `json:"chgTime"` // change time - IsZero for unknown
 	CacheSize    int64  `json:"size"`    // size of directory and contents or -1 if unknown
 
 	CacheItems int64      `json:"items"`     // number of objects or -1 for unknown
@@ -114,11 +115,21 @@ func (d *Directory) ModTime() time.Time {
 	return time.Unix(0, d.CacheModTime)
 }
 
+// ChgTime returns the cached ChgTime
+func (d *Directory) ChgTime() time.Time {
+	return time.Unix(0, d.CacheChgTime)
+}
+
 // Size returns the cached Size
 func (d *Directory) Size() int64 {
 	return d.CacheSize
 }
 
+// Meta returns the meta of the file
+func (d *Directory) Meta() map[string]string {
+	return nil
+}
+
 // Items returns the cached Items
 func (d *Directory) Items() int64 {
 	return d.CacheItems
diff --git a/backend/cache/object.go b/backend/cache/object.go
index d468981c..67442a16 100644
--- a/backend/cache/object.go
+++ b/backend/cache/object.go
@@ -28,6 +28,7 @@ type Object struct {
 	Name          string               `json:"name"`     // name of the directory
 	Dir           string               `json:"dir"`      // abs path of the object
 	CacheModTime  int64                `json:"modTime"`  // modification or creation time - IsZero for unknown
+	CacheChgTime  int64                `json:"chgTime"`  // modification or creation time - IsZero for unknown
 	CacheSize     int64                `json:"size"`     // size of directory and contents or -1 if unknown
 	CacheStorable bool                 `json:"storable"` // says whether this object can be stored
 	CacheType     string               `json:"cacheType"`
@@ -59,6 +60,7 @@ func NewObject(f *Fs, remote string) *Object {
 		Name:          cleanPath(name),
 		Dir:           cleanPath(dir),
 		CacheModTime:  time.Now().UnixNano(),
+		CacheChgTime:  time.Now().UnixNano(),
 		CacheSize:     0,
 		CacheStorable: false,
 		CacheType:     cacheType,
@@ -188,18 +190,20 @@ func (o *Object) refreshFromSource(force bool) error {
 	return nil
 }
 
-// SetModTime sets the ModTime of this object
-func (o *Object) SetModTime(t time.Time) error {
+// SetMeta sets the ModTime of this object
+func (o *Object) SetMeta(t time.Time, t2 time.Time, m map[string]string) error {
 	if err := o.refreshFromSource(false); err != nil {
 		return err
 	}
 
-	err := o.Object.SetModTime(t)
+	err := o.Object.SetMeta(t, t2, m)
 	if err != nil {
 		return err
 	}
 
 	o.CacheModTime = t.UnixNano()
+	o.CacheChgTime = t2.UnixNano()
+	// TBD cache meta
 	o.persist()
 	fs.Debugf(o, "updated ModTime: %v", t)
 
diff --git a/backend/drive/drive.go b/backend/drive/drive.go
index 46cfd362..db607b0b 100644
--- a/backend/drive/drive.go
+++ b/backend/drive/drive.go
@@ -2254,6 +2254,30 @@ func (f *Fs) getRemoteInfo(remote string) (info *drive.File, err error) {
 	return
 }
 
+// Meta returns the meta of the file
+func (o *baseObject) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *baseObject) ChgTime() time.Time {
+	return time.Now()
+}
+
+// setMetaData sets the fs data from a drive.File
+func (o *Object) setMetaData(info *drive.File) {
+	o.id = info.Id
+	o.url = fmt.Sprintf("%sfiles/%s?alt=media", o.fs.svc.BasePath, info.Id)
+	o.md5sum = strings.ToLower(info.Md5Checksum)
+	o.bytes = info.Size
+	if o.fs.opt.UseCreatedDate {
+		o.modifiedDate = info.CreatedTime
+	} else {
+		o.modifiedDate = info.ModifiedTime
+	}
+	o.mimeType = info.MimeType
+}
+
 // getRemoteInfoWithExport returns a drive.File and the export settings for the remote
 func (f *Fs) getRemoteInfoWithExport(remote string) (
 	info *drive.File, extension, exportName, exportMimeType string, isDocument bool, err error) {
@@ -2305,8 +2329,8 @@ func (o *baseObject) ModTime() time.Time {
 	return modTime
 }
 
-// SetModTime sets the modification time of the drive fs object
-func (o *baseObject) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the drive fs object
+func (o *baseObject) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	// New metadata
 	updateInfo := &drive.File{
 		ModifiedTime: modTime.Format(timeFormatOut),
diff --git a/backend/dropbox/dropbox.go b/backend/dropbox/dropbox.go
index d6b18fdc..cb11f987 100644
--- a/backend/dropbox/dropbox.go
+++ b/backend/dropbox/dropbox.go
@@ -892,6 +892,16 @@ func (o *Object) Size() int64 {
 	return o.bytes
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // setMetadataFromEntry sets the fs data from a files.FileMetadata
 //
 // This isn't a complete set of metadata and has an inacurate date
@@ -947,14 +957,14 @@ func (o *Object) ModTime() time.Time {
 	return o.modTime
 }
 
-// SetModTime sets the modification time of the local fs object
+// SetMeta sets the modification time of the local fs object
 //
 // Commits the datastore
-func (o *Object) SetModTime(modTime time.Time) error {
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	// Dropbox doesn't have a way of doing this so returning this
 	// error will cause the file to be deleted first then
 	// re-uploaded to set the time.
-	return fs.ErrorCantSetModTimeWithoutDelete
+	return fs.ErrorCantSetMetaWithoutDelete
 }
 
 // Storable returns whether this object is storable
diff --git a/backend/ftp/ftp.go b/backend/ftp/ftp.go
index fafe6b70..716e869e 100644
--- a/backend/ftp/ftp.go
+++ b/backend/ftp/ftp.go
@@ -612,13 +612,23 @@ func (o *Object) Size() int64 {
 	return int64(o.info.Size)
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // ModTime returns the modification time of the object
 func (o *Object) ModTime() time.Time {
 	return o.info.ModTime
 }
 
-// SetModTime sets the modification time of the object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	return nil
 }
 
diff --git a/backend/googlecloudstorage/googlecloudstorage.go b/backend/googlecloudstorage/googlecloudstorage.go
index 815a4887..1d135c99 100644
--- a/backend/googlecloudstorage/googlecloudstorage.go
+++ b/backend/googlecloudstorage/googlecloudstorage.go
@@ -807,6 +807,16 @@ func (o *Object) Size() int64 {
 	return o.bytes
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // setMetaData sets the fs data from a storage.Object
 func (o *Object) setMetaData(info *storage.Object) {
 	o.url = info.MediaLink
@@ -885,8 +895,8 @@ func metadataFromModTime(modTime time.Time) map[string]string {
 	return metadata
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) (err error) {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) (err error) {
 	// This only adds metadata so will perserve other metadata
 	object := storage.Object{
 		Bucket:   o.fs.bucket,
diff --git a/backend/http/http.go b/backend/http/http.go
index cb28f25b..70b063e5 100644
--- a/backend/http/http.go
+++ b/backend/http/http.go
@@ -402,6 +402,16 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // ModTime returns the modification time of the remote http file
 func (o *Object) ModTime() time.Time {
 	return o.modTime
@@ -430,10 +440,10 @@ func (o *Object) stat() error {
 	return nil
 }
 
-// SetModTime sets the modification and access time to the specified time
+// SetMeta sets the modification and access time to the specified time
 //
 // it also updates the info field
-func (o *Object) SetModTime(modTime time.Time) error {
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	return errorReadOnly
 }
 
diff --git a/backend/jottacloud/jottacloud.go b/backend/jottacloud/jottacloud.go
index 36928f4c..2885501a 100644
--- a/backend/jottacloud/jottacloud.go
+++ b/backend/jottacloud/jottacloud.go
@@ -888,6 +888,16 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // MimeType of an Object if known, "" otherwise
 func (o *Object) MimeType() string {
 	return o.mimeType
@@ -927,9 +937,9 @@ func (o *Object) ModTime() time.Time {
 	return o.modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
-	return fs.ErrorCantSetModTime
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
+	return fs.ErrorCantSetMeta
 }
 
 // Storable returns a boolean showing whether this object storable
diff --git a/backend/local/local.go b/backend/local/local.go
index 5ffee86a..eb1fee08 100644
--- a/backend/local/local.go
+++ b/backend/local/local.go
@@ -12,6 +12,7 @@ import (
 	"runtime"
 	"strings"
 	"sync"
+	"syscall"
 	"time"
 	"unicode/utf8"
 
@@ -124,7 +125,10 @@ type Object struct {
 	path    string // The local path - may not be properly UTF-8 encoded - for OS
 	size    int64  // file metadata - always present
 	mode    os.FileMode
-	modTime time.Time
+	modTime time.Time // Time of last content change
+	chgTime time.Time // Time of last metadata and attr change
+	accTime time.Time // Time of last access
+	meta    map[string]string // The object metadata if known - may be nil
 	hashes  map[hash.Type]string // Hashes
 }
 
@@ -212,10 +216,12 @@ func (f *Fs) newObject(remote, dstPath string) *Object {
 		dstPath = f.cleanPath(filepath.Join(f.root, remote))
 	}
 	remote = f.cleanRemote(remote)
+	m := map[string]string{}
 	return &Object{
 		fs:     f,
 		remote: remote,
 		path:   dstPath,
+		meta:   m,
 	}
 }
 
@@ -675,13 +681,23 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return o.meta
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return o.chgTime
+}
+
 // ModTime returns the modification time of the object
 func (o *Object) ModTime() time.Time {
 	return o.modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	err := os.Chtimes(o.path, modTime, modTime)
 	if err != nil {
 		return err
@@ -862,8 +878,8 @@ func (o *Object) Update(in io.Reader, src fs.ObjectInfo, options ...fs.OpenOptio
 	o.hashes = hash.Sums()
 	o.fs.objectHashesMu.Unlock()
 
-	// Set the mtime
-	err = o.SetModTime(src.ModTime())
+	// Set the mtime, ctime and meta
+	err = o.SetMeta(src.ModTime(), src.ChgTime(), src.Meta())
 	if err != nil {
 		return err
 	}
@@ -872,10 +888,19 @@ func (o *Object) Update(in io.Reader, src fs.ObjectInfo, options ...fs.OpenOptio
 	return o.lstat()
 }
 
+func timespecToTime(ts syscall.Timespec) time.Time {
+	return time.Unix(int64(ts.Sec), int64(ts.Nsec))
+}
+
 // setMetadata sets the file info from the os.FileInfo passed in
 func (o *Object) setMetadata(info os.FileInfo) {
 	// Don't overwrite the info if we don't need to
 	// this avoids upsetting the race detector
+	stat, ok := info.Sys().(*syscall.Stat_t)
+	if !ok {
+		fmt.Printf("Not a syscall.Stat_t")
+		return
+	}
 	if o.size != info.Size() {
 		o.size = info.Size()
 	}
@@ -885,6 +910,42 @@ func (o *Object) setMetadata(info os.FileInfo) {
 	if o.mode != info.Mode() {
 		o.mode = info.Mode()
 	}
+	if !o.chgTime.Equal(timespecToTime(stat.Ctim)) {
+		o.chgTime = timespecToTime(stat.Ctim)
+	}
+	if !o.accTime.Equal(timespecToTime(stat.Atim)) {
+		o.accTime = timespecToTime(stat.Atim)
+	}
+	if o.meta[fs.MetaSize] != fs.Int64ToString(stat.Size) {
+		o.meta[fs.MetaSize] = fs.Int64ToString(stat.Size)
+	}
+	if o.meta[fs.MetaDev] != fs.Uint64ToString(stat.Dev) {
+		o.meta[fs.MetaDev] = fs.Uint64ToString(stat.Dev)
+	}
+	if o.meta[fs.MetaIno] != fs.Uint64ToString(stat.Ino) {
+		o.meta[fs.MetaIno] = fs.Uint64ToString(stat.Ino)
+	}
+	if o.meta[fs.MetaNlink] != fs.Uint64ToString(stat.Nlink) {
+		o.meta[fs.MetaNlink] = fs.Uint64ToString(stat.Nlink)
+	}
+	if o.meta[fs.MetaMode] != fs.Uint32ToString(stat.Mode) {
+		o.meta[fs.MetaMode] = fs.Uint32ToString(stat.Mode)
+	}
+	if o.meta[fs.MetaUid] != fs.Uint32ToString(stat.Uid) {
+		o.meta[fs.MetaUid] = fs.Uint32ToString(stat.Uid)
+	}
+	if o.meta[fs.MetaGid] != fs.Uint32ToString(stat.Gid) {
+		o.meta[fs.MetaGid] = fs.Uint32ToString(stat.Gid)
+	}
+	if o.meta[fs.MetaRdev] != fs.Uint64ToString(stat.Rdev) {
+		o.meta[fs.MetaRdev] = fs.Uint64ToString(stat.Rdev)
+	}
+	if o.meta[fs.MetaBlksize] != fs.Int64ToString(stat.Blksize) {
+		o.meta[fs.MetaBlksize] = fs.Int64ToString(stat.Blksize)
+	}
+	if o.meta[fs.MetaBlocks] != fs.Int64ToString(stat.Blocks) {
+		o.meta[fs.MetaBlocks] = fs.Int64ToString(stat.Blocks)
+	}
 }
 
 // Stat a Object into info
diff --git a/backend/mega/mega.go b/backend/mega/mega.go
index 8d31f968..bddcdd80 100644
--- a/backend/mega/mega.go
+++ b/backend/mega/mega.go
@@ -909,6 +909,16 @@ func (o *Object) Size() int64 {
 	return o.info.GetSize()
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // setMetaData sets the metadata from info
 func (o *Object) setMetaData(info *mega.Node) (err error) {
 	if info.GetType() != mega.FILE {
@@ -944,9 +954,9 @@ func (o *Object) ModTime() time.Time {
 	return o.info.GetTimeStamp()
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
-	return fs.ErrorCantSetModTime
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
+	return fs.ErrorCantSetMeta
 }
 
 // Storable returns a boolean showing whether this object storable
diff --git a/backend/onedrive/onedrive.go b/backend/onedrive/onedrive.go
index 1223be91..47330408 100644
--- a/backend/onedrive/onedrive.go
+++ b/backend/onedrive/onedrive.go
@@ -901,7 +901,7 @@ func (f *Fs) Copy(src fs.Object, remote string) (fs.Object, error) {
 	// Copy does NOT copy the modTime from the source and there seems to
 	// be no way to set date before
 	// This will create TWO versions on OneDrive
-	err = dstObj.SetModTime(srcObj.ModTime())
+	err = dstObj.SetMeta(srcObj.ModTime(), srcObj.ChgTime(), srcObj.Meta())
 	if err != nil {
 		return nil, err
 	}
@@ -1196,6 +1196,16 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // setMetaData sets the metadata from info
 func (o *Object) setMetaData(info *api.Item) (err error) {
 	if info.GetFolder() != nil {
@@ -1298,8 +1308,8 @@ func (o *Object) setModTime(modTime time.Time) (*api.Item, error) {
 	return info, err
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	info, err := o.setModTime(modTime)
 	if err != nil {
 		return err
diff --git a/backend/opendrive/opendrive.go b/backend/opendrive/opendrive.go
index 5cc4897d..96841c8c 100644
--- a/backend/opendrive/opendrive.go
+++ b/backend/opendrive/opendrive.go
@@ -837,6 +837,16 @@ func (o *Object) Size() int64 {
 	return o.size // Object is likely PENDING
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // ModTime returns the modification time of the object
 //
 //
@@ -846,9 +856,9 @@ func (o *Object) ModTime() time.Time {
 	return o.modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
-	// fs.Debugf(nil, "SetModTime(%v)", modTime.String())
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
+	// fs.Debugf(nil, "SetMeta(%v)", modTime.String())
 	opts := rest.Opts{
 		Method:     "PUT",
 		NoResponse: true,
@@ -1053,7 +1063,7 @@ func (o *Object) Update(in io.Reader, src fs.ObjectInfo, options ...fs.OpenOptio
 	o.size = closeResponse.Size
 
 	// Set the mod time now
-	err = o.SetModTime(modTime)
+	err = o.SetMeta(modTime, src.ChgTime(), src.Meta())
 	if err != nil {
 		return err
 	}
diff --git a/backend/pcloud/pcloud.go b/backend/pcloud/pcloud.go
index fdd57b02..a6b13b80 100644
--- a/backend/pcloud/pcloud.go
+++ b/backend/pcloud/pcloud.go
@@ -919,6 +919,16 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // setMetaData sets the metadata from info
 func (o *Object) setMetaData(info *api.Item) (err error) {
 	if info.IsFolder {
@@ -971,11 +981,11 @@ func (o *Object) ModTime() time.Time {
 	return o.modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	// Pcloud doesn't have a way of doing this so returning this
 	// error will cause the file to be re-uploaded to set the time.
-	return fs.ErrorCantSetModTime
+	return fs.ErrorCantSetMeta
 }
 
 // Storable returns a boolean showing whether this object storable
diff --git a/backend/qingstor/qingstor.go b/backend/qingstor/qingstor.go
index 1438cf61..4de2da69 100644
--- a/backend/qingstor/qingstor.go
+++ b/backend/qingstor/qingstor.go
@@ -842,8 +842,8 @@ func (o *Object) ModTime() time.Time {
 	return modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	err := o.readMetaData()
 	if err != nil {
 		return err
@@ -852,7 +852,7 @@ func (o *Object) SetModTime(modTime time.Time) error {
 	mimeType := fs.MimeType(o)
 
 	if o.size >= maxSizeForCopy {
-		fs.Debugf(o, "SetModTime is unsupported for objects bigger than %v bytes", fs.SizeSuffix(maxSizeForCopy))
+		fs.Debugf(o, "SetMeta is unsupported for objects bigger than %v bytes", fs.SizeSuffix(maxSizeForCopy))
 		return nil
 	}
 	// Copy the object to itself to update the metadata
@@ -988,6 +988,16 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // MimeType of an Object if known, "" otherwise
 func (o *Object) MimeType() string {
 	err := o.readMetaData()
diff --git a/backend/s3/s3.go b/backend/s3/s3.go
index ade20a27..33d51419 100644
--- a/backend/s3/s3.go
+++ b/backend/s3/s3.go
@@ -610,6 +610,8 @@ Use this only if v4 signatures don't work, eg pre Jewel/v10 CEPH.`,
 // Constants
 const (
 	metaMtime      = "Mtime"                       // the meta key to store mtime in - eg X-Amz-Meta-Mtime
+	metaCtime      = "Ctime"                       // the meta key to store ctime in - eg X-Amz-Meta-Ctime
+	metaAtime      = "Atime"                       // the meta key to store atime in - eg X-Amz-Meta-Atime
 	metaMD5Hash    = "Md5chksum"                   // the meta key to store md5hash in
 	metaSize       = "Size"                        // the meta key to store size in
 	metaMdOnly     = "Mdonly"                      // the meta key to specify that a request is metadata-only
@@ -1394,6 +1396,35 @@ func (o *Object) Size() int64 {
 	return o.bytes
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	if fs.Config.UseServerModTime {
+		return o.lastModified
+	}
+	err := o.readMetaData()
+	if err != nil {
+		fs.Logf(o, "Failed to read metadata: %v", err)
+		return time.Now()
+	}
+	// read ctime out of metadata if available
+	d, ok := o.meta[metaCtime]
+	if !ok || d == nil {
+		// fs.Debugf(o, "No metadata")
+		return o.lastModified
+	}
+	chgTime, err := swift.FloatStringToTime(*d)
+	if err != nil {
+		fs.Logf(o, "Failed to read ctime from object: %v", err)
+		return o.lastModified
+	}
+	return chgTime
+}
+
 // readMetaData gets the metadata if it hasn't already been fetched
 //
 // it also sets the info
@@ -1466,16 +1497,21 @@ func (o *Object) ModTime() time.Time {
 	return modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	err := o.readMetaData()
 	if err != nil {
 		return err
 	}
 	o.meta[metaMtime] = aws.String(swift.TimeToFloatString(modTime))
-
+	o.meta[metaCtime] = aws.String(swift.TimeToFloatString(chgTime))
+	if (meta != nil) {
+		for key, value := range meta {
+			o.meta[key] = aws.String(value)
+		}
+	}
 	if o.bytes >= maxSizeForCopy {
-		fs.Debugf(o, "SetModTime is unsupported for objects bigger than %v bytes", fs.SizeSuffix(maxSizeForCopy))
+		fs.Debugf(o, "SetMeta is unsupported for objects bigger than %v bytes", fs.SizeSuffix(maxSizeForCopy))
 		return nil
 	}
 
@@ -1558,6 +1594,7 @@ func (o *Object) Update(in io.Reader, src fs.ObjectInfo, options ...fs.OpenOptio
 		return err
 	}
 	modTime := src.ModTime()
+	chgTime := src.ChgTime()
 	size := src.Size()
 
 	uploader := s3manager.NewUploader(o.fs.ses, func(u *s3manager.Uploader) {
@@ -1582,6 +1619,12 @@ func (o *Object) Update(in io.Reader, src fs.ObjectInfo, options ...fs.OpenOptio
 	// Set the mtime in the meta data
 	metadata := map[string]*string{
 		metaMtime: aws.String(swift.TimeToFloatString(modTime)),
+		metaCtime: aws.String(swift.TimeToFloatString(chgTime)),
+	}
+	if (src.Meta() != nil) {
+		for key, value := range src.Meta() {
+			metadata[key] = aws.String(value)
+		}
 	}
 
 	if !o.fs.opt.DisableChecksum && size > uploader.PartSize ||
diff --git a/backend/sftp/sftp.go b/backend/sftp/sftp.go
index cfa6d400..18ef9716 100644
--- a/backend/sftp/sftp.go
+++ b/backend/sftp/sftp.go
@@ -126,7 +126,7 @@ type Options struct {
 	DisableHashCheck  bool   `config:"disable_hashcheck"`
 	AskPassword       bool   `config:"ask_password"`
 	PathOverride      string `config:"path_override"`
-	SetModTime        bool   `config:"set_modtime"`
+	SetMeta           bool   `config:"set_meta"`
 }
 
 // Fs stores the interface to the remote SFTP files
@@ -828,6 +828,16 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // ModTime returns the modification time of the remote sftp file
 func (o *Object) ModTime() time.Time {
 	return o.modTime
@@ -873,24 +883,24 @@ func (o *Object) stat() error {
 	return nil
 }
 
-// SetModTime sets the modification and access time to the specified time
+// SetMeta sets the modification and access time to the specified time
 //
 // it also updates the info field
-func (o *Object) SetModTime(modTime time.Time) error {
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	c, err := o.fs.getSftpConnection()
 	if err != nil {
-		return errors.Wrap(err, "SetModTime")
+		return errors.Wrap(err, "SetMeta")
 	}
-	if o.fs.opt.SetModTime {
-		err = c.sftpClient.Chtimes(o.path(), modTime, modTime)
+	if o.fs.opt.SetMeta {
+		err = c.sftpClient.Chtimes(o.path(), modTime, chgTime)
 		o.fs.putSftpConnection(&c, err)
 		if err != nil {
-			return errors.Wrap(err, "SetModTime failed")
+			return errors.Wrap(err, "SetMeta failed")
 		}
 	}
 	err = o.stat()
 	if err != nil {
-		return errors.Wrap(err, "SetModTime stat failed")
+		return errors.Wrap(err, "SetMeta stat failed")
 	}
 	return nil
 }
@@ -1019,9 +1029,9 @@ func (o *Object) Update(in io.Reader, src fs.ObjectInfo, options ...fs.OpenOptio
 		remove()
 		return errors.Wrap(err, "Update Close failed")
 	}
-	err = o.SetModTime(src.ModTime())
+	err = o.SetMeta(src.ModTime(), src.ChgTime(), src.Meta())
 	if err != nil {
-		return errors.Wrap(err, "Update SetModTime failed")
+		return errors.Wrap(err, "Update SetMeta failed")
 	}
 	return nil
 }
diff --git a/backend/swift/swift.go b/backend/swift/swift.go
index 81dc6bbb..6c5f4d76 100644
--- a/backend/swift/swift.go
+++ b/backend/swift/swift.go
@@ -876,6 +876,16 @@ func (o *Object) Size() int64 {
 	return o.info.Bytes
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil; // TBD
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // readMetaData gets the metadata if it hasn't already been fetched
 //
 // it also sets the info
@@ -924,8 +934,8 @@ func (o *Object) ModTime() time.Time {
 	return modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, m map[string]string) error {
 	err := o.readMetaData()
 	if err != nil {
 		return err
diff --git a/backend/webdav/webdav.go b/backend/webdav/webdav.go
index 8370d790..c30ebdec 100644
--- a/backend/webdav/webdav.go
+++ b/backend/webdav/webdav.go
@@ -13,7 +13,7 @@ package webdav
 // https://github.com/nextcloud/server/issues/6129
 // owncloud seems to have checksums as metadata though - can read them
 
-// SetModTime might be possible
+// SetMeta might be possible
 // https://stackoverflow.com/questions/3579608/webdav-can-a-client-modify-the-mtime-of-a-file
 // ...support for a PROPSET to lastmodified (mind the missing get) which does the utime() call might be an option.
 // For example the ownCloud WebDAV server does it that way.
@@ -883,6 +883,16 @@ func (o *Object) Size() int64 {
 	return o.size
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // setMetaData sets the metadata from info
 func (o *Object) setMetaData(info *api.Prop) (err error) {
 	o.hasMetaData = true
@@ -918,9 +928,9 @@ func (o *Object) ModTime() time.Time {
 	return o.modTime
 }
 
-// SetModTime sets the modification time of the local fs object
-func (o *Object) SetModTime(modTime time.Time) error {
-	return fs.ErrorCantSetModTime
+// SetMeta sets the modification time of the local fs object
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
+	return fs.ErrorCantSetMeta
 }
 
 // Storable returns a boolean showing whether this object storable
diff --git a/backend/yandex/yandex.go b/backend/yandex/yandex.go
index f237d683..f607ad2e 100644
--- a/backend/yandex/yandex.go
+++ b/backend/yandex/yandex.go
@@ -937,6 +937,16 @@ func (o *Object) readMetaData() (err error) {
 	return o.setMetaData(info)
 }
 
+// Meta returns the meta of the file
+func (o *Object) Meta() map[string]string {
+	return nil
+}
+
+// ChgTime returns the change date of the file
+func (o *Object) ChgTime() time.Time {
+	return time.Now()
+}
+
 // ModTime returns the modification time of the object
 //
 // It attempts to read the objects mtime and if that isn't present the
@@ -995,10 +1005,10 @@ func (o *Object) setCustomProperty(property string, value string) (err error) {
 	return err
 }
 
-// SetModTime sets the modification time of the local fs object
+// SetMeta sets the modification time of the local fs object
 //
 // Commits the datastore
-func (o *Object) SetModTime(modTime time.Time) error {
+func (o *Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	// set custom_property 'rclone_modified' of object to modTime
 	err := o.setCustomProperty("rclone_modified", modTime.Format(time.RFC3339Nano))
 	if err != nil {
@@ -1112,7 +1122,7 @@ func (o *Object) Update(in io.Reader, src fs.ObjectInfo, options ...fs.OpenOptio
 	o.md5sum = ""                   // according to unit tests after put the md5 is empty.
 	o.size = int64(in1.BytesRead()) // better solution o.readMetaData() ?
 	//and set modTime of uploaded file
-	err = o.SetModTime(modTime)
+	err = o.SetMeta(modTime, src.ChgTime(), src.Meta())
 
 	return err
 }
diff --git a/cmd/lsjson/lsjson.go b/cmd/lsjson/lsjson.go
index c0984816..91a95503 100644
--- a/cmd/lsjson/lsjson.go
+++ b/cmd/lsjson/lsjson.go
@@ -21,6 +21,7 @@ func init() {
 	commandDefintion.Flags().BoolVarP(&opt.Recurse, "recursive", "R", false, "Recurse into the listing.")
 	commandDefintion.Flags().BoolVarP(&opt.ShowHash, "hash", "", false, "Include hashes in the output (may take longer).")
 	commandDefintion.Flags().BoolVarP(&opt.NoModTime, "no-modtime", "", false, "Don't read the modification time (can speed things up).")
+	commandDefintion.Flags().BoolVarP(&opt.NoChgTime, "no-chgtime", "", false, "Don't read the change time (can speed things up).")
 	commandDefintion.Flags().BoolVarP(&opt.ShowEncrypted, "encrypted", "M", false, "Show the encrypted names.")
 	commandDefintion.Flags().BoolVarP(&opt.ShowOrigIDs, "original", "", false, "Show the ID of the underlying Object.")
 }
@@ -43,6 +44,7 @@ The output is an array of Items, where each Item looks like this
       "IsDir" : false,
       "MimeType" : "application/octet-stream",
       "ModTime" : "2017-05-31T16:15:57.034468261+01:00",
+      "ChgTime" : "2017-05-31T16:15:57.034468261+01:00",
       "Name" : "file.txt",
       "Encrypted" : "v0qpsdq8anpci8n929v3uu9338",
       "Path" : "full/path/goes/here/file.txt",
@@ -53,6 +55,8 @@ If --hash is not specified the Hashes property won't be emitted.
 
 If --no-modtime is specified then ModTime will be blank.
 
+If --no-chgtime is specified then ChgTime will be blank.
+
 If --encrypted is not specified the Encrypted won't be emitted.
 
 The Path field will only show folders below the remote path being listed.
diff --git a/cmd/touch/touch.go b/cmd/touch/touch.go
index ce7c45f2..4d73d8d7 100644
--- a/cmd/touch/touch.go
+++ b/cmd/touch/touch.go
@@ -64,7 +64,7 @@ func Touch(fsrc fs.Fs, srcFileName string) error {
 		}
 		return nil
 	}
-	err = file.SetModTime(timeAtr)
+	err = file.SetMeta(timeAtr, timeAtr, nil)
 	if err != nil {
 		return errors.Wrap(err, "touch: couldn't set mod time")
 	}
diff --git a/fs/config.go b/fs/config.go
index 4114aac4..c726ed55 100644
--- a/fs/config.go
+++ b/fs/config.go
@@ -62,7 +62,7 @@ type ConfigInfo struct {
 	MaxDepth              int
 	IgnoreSize            bool
 	IgnoreChecksum        bool
-	NoUpdateModTime       bool
+	NoUpdateMeta          bool
 	DataRateUnit          string
 	BackupDir             string
 	Suffix                string
@@ -85,6 +85,7 @@ type ConfigInfo struct {
 	StatsOneLine          bool
 	Progress              bool
 	MdOnly                bool
+	UseCtime              bool
 }
 
 // NewConfig creates a new config with everything set to the default
diff --git a/fs/config/configflags/configflags.go b/fs/config/configflags/configflags.go
index ae57fd07..cd5995c8 100644
--- a/fs/config/configflags/configflags.go
+++ b/fs/config/configflags/configflags.go
@@ -66,7 +66,7 @@ func AddFlags(flagSet *pflag.FlagSet) {
 	flags.BoolVarP(flagSet, &fs.Config.IgnoreSize, "ignore-size", "", false, "Ignore size when skipping use mod-time or checksum.")
 	flags.BoolVarP(flagSet, &fs.Config.IgnoreChecksum, "ignore-checksum", "", fs.Config.IgnoreChecksum, "Skip post copy check of checksums.")
 	flags.BoolVarP(flagSet, &noTraverse, "no-traverse", "", noTraverse, "Obsolete - does nothing.")
-	flags.BoolVarP(flagSet, &fs.Config.NoUpdateModTime, "no-update-modtime", "", fs.Config.NoUpdateModTime, "Don't update destination mod-time if files identical.")
+	flags.BoolVarP(flagSet, &fs.Config.NoUpdateMeta, "no-update-meta", "", fs.Config.NoUpdateMeta, "Don't update destination mod-time, chg-time and meta if files identical.")
 	flags.StringVarP(flagSet, &fs.Config.BackupDir, "backup-dir", "", fs.Config.BackupDir, "Make backups into hierarchy based in DIR.")
 	flags.StringVarP(flagSet, &fs.Config.Suffix, "suffix", "", fs.Config.Suffix, "Suffix for use with --backup-dir.")
 	flags.BoolVarP(flagSet, &fs.Config.UseListR, "fast-list", "", fs.Config.UseListR, "Use recursive list if available. Uses more memory but fewer transactions.")
@@ -89,6 +89,7 @@ func AddFlags(flagSet *pflag.FlagSet) {
 	flags.BoolVarP(flagSet, &fs.Config.StatsOneLine, "stats-one-line", "", fs.Config.StatsOneLine, "Make the stats fit on one line.")
 	flags.BoolVarP(flagSet, &fs.Config.Progress, "progress", "P", fs.Config.Progress, "Show progress during transfer.")
 	flags.BoolVarP(flagSet, &fs.Config.MdOnly, "md-only", "", fs.Config.MdOnly, "Upload metadata only.")
+	flags.BoolVarP(flagSet, &fs.Config.UseCtime, "use-ctime", "", fs.Config.UseCtime, "Use change time instead of mod time for operations.")
 }
 
 // SetFlags converts any flags into config which weren't straight foward
diff --git a/fs/dir.go b/fs/dir.go
index 891dc8d6..9d76eede 100644
--- a/fs/dir.go
+++ b/fs/dir.go
@@ -6,7 +6,9 @@ import "time"
 type Dir struct {
 	remote  string    // name of the directory
 	modTime time.Time // modification or creation time - IsZero for unknown
+	chgTime time.Time // change time - IsZero for unknown
 	size    int64     // size of directory and contents or -1 if unknown
+	meta    map[string]string // The object metadata if known - may be nil
 	items   int64     // number of objects or -1 for unknown
 	id      string    // optional ID
 }
@@ -67,11 +69,24 @@ func (d *Dir) ModTime() time.Time {
 	return time.Now()
 }
 
+// ChgTime returns the change date of the file
+func (d *Dir) ChgTime() time.Time {
+	if !d.chgTime.IsZero() {
+		return d.chgTime
+	}
+	return time.Now()
+}
+
 // Size returns the size of the file
 func (d *Dir) Size() int64 {
 	return d.size
 }
 
+// Meta returns the meta of the file
+func (d *Dir) Meta() map[string]string {
+	return d.meta
+}
+
 // SetSize sets the size of the directory
 func (d *Dir) SetSize(size int64) *Dir {
 	d.size = size
diff --git a/fs/fs.go b/fs/fs.go
index 6a3b3a28..5a6412ed 100644
--- a/fs/fs.go
+++ b/fs/fs.go
@@ -48,8 +48,8 @@ var (
 	ErrorCantMove                    = errors.New("can't move object - incompatible remotes")
 	ErrorCantDirMove                 = errors.New("can't move directory - incompatible remotes")
 	ErrorDirExists                   = errors.New("can't copy directory - destination already exists")
-	ErrorCantSetModTime              = errors.New("can't set modified time")
-	ErrorCantSetModTimeWithoutDelete = errors.New("can't set modified time without deleting existing object")
+	ErrorCantSetMeta                 = errors.New("can't set meta")
+	ErrorCantSetMetaWithoutDelete    = errors.New("can't set modified time and meta without deleting existing object")
 	ErrorDirNotFound                 = errors.New("directory not found")
 	ErrorObjectNotFound              = errors.New("object not found")
 	ErrorLevelNotSupported           = errors.New("level value not supported")
@@ -195,6 +195,35 @@ type OptionExample struct {
 	Provider string
 }
 
+// Additional metadata
+const (
+	MetaDev		= "Dev"
+	MetaIno		= "Ino"
+	MetaNlink	= "Nlink"
+	MetaMode	= "Mode"
+	MetaUid		= "Uid"
+	MetaGid		= "Gid"
+	MetaSize        = "Size"
+	MetaRdev        = "Rdev"
+	MetaBlksize     = "Blksize"
+	MetaBlocks      = "Blocks"
+)
+
+func Int64ToString(ns int64) string {
+        result := fmt.Sprintf("%d", ns)
+        return result
+}
+
+func Uint64ToString(ns uint64) string {
+        result := fmt.Sprintf("%d", ns)
+        return result
+}
+
+func Uint32ToString(ns uint32) string {
+        result := fmt.Sprintf("%d", ns)
+        return result
+}
+
 // Register a filesystem
 //
 // Fs modules  should use this in an init() function
@@ -268,8 +297,8 @@ type Info interface {
 type Object interface {
 	ObjectInfo
 
-	// SetModTime sets the metadata on the object to set the modification date
-	SetModTime(time.Time) error
+	// SetMeta sets the modtime, chgTime and meta key/values on the object
+	SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error
 
 	// Open opens the file for read.  Call Close() on the returned io.ReadCloser
 	Open(options ...OpenOption) (io.ReadCloser, error)
@@ -310,8 +339,14 @@ type DirEntry interface {
 	// It should return a best guess if one isn't available
 	ModTime() time.Time
 
+	// ChgTime return the metadata and attributes change date
+	// of the file
+	ChgTime() time.Time
+	
 	// Size returns the size of the file
 	Size() int64
+
+	Meta() map[string]string
 }
 
 // Directory is a filesystem like directory provided by an Fs
diff --git a/fs/list/list_test.go b/fs/list/list_test.go
index f6d8bdf1..20409c0d 100644
--- a/fs/list/list_test.go
+++ b/fs/list/list_test.go
@@ -89,6 +89,8 @@ type unknownDirEntry string
 func (o unknownDirEntry) String() string         { return string(o) }
 func (o unknownDirEntry) Remote() string         { return string(o) }
 func (o unknownDirEntry) ModTime() (t time.Time) { return t }
+func (o unknownDirEntry) ChgTime() (t time.Time) { return t }
+func (o unknownDirEntry) Meta() (m map[string]string) { return m }
 func (o unknownDirEntry) Size() int64            { return 0 }
 
 func TestFilterAndSortUnknown(t *testing.T) {
diff --git a/fs/object/object.go b/fs/object/object.go
index e11827b9..c2cf536c 100644
--- a/fs/object/object.go
+++ b/fs/object/object.go
@@ -37,6 +37,7 @@ func NewStaticObjectInfo(remote string, modTime time.Time, size int64, storable
 type staticObjectInfo struct {
 	remote   string
 	modTime  time.Time
+	chgTime  time.Time
 	size     int64
 	storable bool
 	hashes   map[hash.Type]string
@@ -47,7 +48,9 @@ func (i *staticObjectInfo) Fs() fs.Info        { return i.fs }
 func (i *staticObjectInfo) Remote() string     { return i.remote }
 func (i *staticObjectInfo) String() string     { return i.remote }
 func (i *staticObjectInfo) ModTime() time.Time { return i.modTime }
+func (i *staticObjectInfo) ChgTime() time.Time { return i.chgTime }
 func (i *staticObjectInfo) Size() int64        { return i.size }
+func (i *staticObjectInfo) Meta() map[string]string { return nil }
 func (i *staticObjectInfo) Storable() bool     { return i.storable }
 func (i *staticObjectInfo) Hash(h hash.Type) (string, error) {
 	if len(i.hashes) == 0 {
@@ -132,6 +135,8 @@ var _ fs.Fs = MemoryFs
 type MemoryObject struct {
 	remote  string
 	modTime time.Time
+	chgTime time.Time
+	meta    map[string]string
 	content []byte
 }
 
@@ -169,11 +174,21 @@ func (o *MemoryObject) ModTime() time.Time {
 	return o.modTime
 }
 
+// ChgTime returns the change date of the file
+func (o *MemoryObject) ChgTime() time.Time {
+	return o.chgTime
+}
+
 // Size returns the size of the file
 func (o *MemoryObject) Size() int64 {
 	return int64(len(o.content))
 }
 
+// Meta returns the meta of the file
+func (o *MemoryObject) Meta() map[string]string {
+	return nil
+}
+
 // Storable says whether this object can be stored
 func (o *MemoryObject) Storable() bool {
 	return true
@@ -192,9 +207,11 @@ func (o *MemoryObject) Hash(h hash.Type) (string, error) {
 	return hash.Sums()[h], nil
 }
 
-// SetModTime sets the metadata on the object to set the modification date
-func (o *MemoryObject) SetModTime(modTime time.Time) error {
+// SetMeta sets the metadata on the object to set the modification date
+func (o *MemoryObject) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	o.modTime = modTime
+	o.chgTime = chgTime
+	o.meta = meta
 	return nil
 }
 
diff --git a/fs/object/object_test.go b/fs/object/object_test.go
index cc1a17cc..1d02c724 100644
--- a/fs/object/object_test.go
+++ b/fs/object/object_test.go
@@ -104,7 +104,7 @@ func TestMemoryObject(t *testing.T) {
 	assert.Equal(t, "3e2e95f5ad970eadfa7e17eaf73da97024aa5359", Hash)
 
 	newNow := now.Add(time.Minute)
-	err = o.SetModTime(newNow)
+	err = o.SetMeta(newNow, newNow, nil)
 	assert.NoError(t, err)
 	assert.Equal(t, newNow, o.ModTime())
 
diff --git a/fs/operations/lsjson.go b/fs/operations/lsjson.go
index 79465ece..b4ea1762 100644
--- a/fs/operations/lsjson.go
+++ b/fs/operations/lsjson.go
@@ -40,6 +40,7 @@ func (t Timestamp) MarshalJSON() (out []byte, err error) {
 type ListJSONOpt struct {
 	Recurse       bool `json:"recurse"`
 	NoModTime     bool `json:"noModTime"`
+	NoChgTime     bool `json:"noChgTime"`
 	ShowEncrypted bool `json:"showEncrypted"`
 	ShowOrigIDs   bool `json:"showOrigIDs"`
 	ShowHash      bool `json:"showHash"`
diff --git a/fs/operations/operations.go b/fs/operations/operations.go
index 39a8c02f..4686c749 100644
--- a/fs/operations/operations.go
+++ b/fs/operations/operations.go
@@ -140,14 +140,25 @@ func equal(src fs.ObjectInfo, dst fs.Object, sizeOnly, checkSum bool) bool {
 	}
 	srcModTime := src.ModTime()
 	dstModTime := dst.ModTime()
-	dt := dstModTime.Sub(srcModTime)
-	if dt < modifyWindow && dt > -modifyWindow {
-		fs.Debugf(src, "Size and modification time the same (differ by %s, within tolerance %s)", dt, modifyWindow)
-		return true
+	srcChgTime := src.ChgTime()
+	dstChgTime := dst.ChgTime()
+	srcMeta := src.Meta()
+	if (fs.Config.UseCtime) {
+		dt := dstChgTime.Sub(srcChgTime)
+		if dt < modifyWindow && dt > -modifyWindow {
+			fs.Debugf(src, "Size and change time the same (differ by %s, within tolerance %s)", dt, modifyWindow)
+			return true
+		}
+		fs.Debugf(src, "Changes times differ by %s: %v, %v", dt, srcModTime, dstModTime)
+	} else {
+		dt := dstModTime.Sub(srcModTime)
+		if dt < modifyWindow && dt > -modifyWindow {
+			fs.Debugf(src, "Size and modification time the same (differ by %s, within tolerance %s)", dt, modifyWindow)
+			return true
+		}
+		fs.Debugf(src, "Modification times differ by %s: %v, %v", dt, srcModTime, dstModTime)
 	}
 
-	fs.Debugf(src, "Modification times differ by %s: %v, %v", dt, srcModTime, dstModTime)
-
 	// Check if the hashes are the same
 	same, ht, _ := CheckHashes(src, dst)
 	if !same {
@@ -160,7 +171,7 @@ func equal(src fs.ObjectInfo, dst fs.Object, sizeOnly, checkSum bool) bool {
 	}
 
 	// mod time differs but hash is the same to reset mod time if required
-	if !fs.Config.NoUpdateModTime {
+	if !fs.Config.NoUpdateMeta {
 		if fs.Config.DryRun {
 			fs.Logf(src, "Not updating modification time as --dry-run")
 		} else {
@@ -171,12 +182,12 @@ func equal(src fs.ObjectInfo, dst fs.Object, sizeOnly, checkSum bool) bool {
 				return false
 			}
 			// Update the mtime of the dst object here
-			err := dst.SetModTime(srcModTime)
-			if err == fs.ErrorCantSetModTime {
-				fs.Debugf(dst, "src and dst identical but can't set mod time without re-uploading")
+			err := dst.SetMeta(srcModTime, srcChgTime, srcMeta)
+			if err == fs.ErrorCantSetMeta {
+				fs.Debugf(dst, "src and dst identical but can't set mod time, chg time and meta without re-uploading")
 				return false
-			} else if err == fs.ErrorCantSetModTimeWithoutDelete {
-				fs.Debugf(dst, "src and dst identical but can't set mod time without deleting and re-uploading")
+			} else if err == fs.ErrorCantSetMetaWithoutDelete {
+				fs.Debugf(dst, "src and dst identical but can't set mod time, chg time and meta without deleting and re-uploading")
 				// Remove the file if BackupDir isn't set.  If BackupDir is set we would rather have the old file
 				// put in the BackupDir than deleted which is what will happen if we don't delete it.
 				if fs.Config.BackupDir == "" {
diff --git a/fs/sync/sync_test.go b/fs/sync/sync_test.go
index 019b171c..70aeaa51 100644
--- a/fs/sync/sync_test.go
+++ b/fs/sync/sync_test.go
@@ -449,9 +449,9 @@ func TestSyncAfterChangingModtimeOnlyWithNoUpdateModTime(t *testing.T) {
 		return
 	}
 
-	fs.Config.NoUpdateModTime = true
+	fs.Config.NoUpdateMeta = true
 	defer func() {
-		fs.Config.NoUpdateModTime = false
+		fs.Config.NoUpdateMeta = false
 	}()
 
 	file1 := r.WriteFile("empty space", "", t2)
diff --git a/fstest/fstests/fstests.go b/fstest/fstests/fstests.go
index 8d0f587e..70823525 100644
--- a/fstest/fstests/fstests.go
+++ b/fstest/fstests/fstests.go
@@ -1222,6 +1222,46 @@ func Run(t *testing.T, opt *Opt) {
 				file1Contents = contents
 			})
 
+			// TestObjectMimeType tests the MimeType of the object is correct
+			t.Run("TestObjectMimeType", func(t *testing.T) {
+				skipIfNotOk(t)
+				obj := findObject(t, remote, file1.Path)
+				do, ok := obj.(fs.MimeTyper)
+				if !ok {
+					t.Skip("MimeType method not supported")
+				}
+				mimeType := do.MimeType()
+				if strings.ContainsRune(mimeType, ';') {
+					assert.Equal(t, "text/plain; charset=utf-8", mimeType)
+				} else {
+					assert.Equal(t, "text/plain", mimeType)
+				}
+			})
+
+			// TestObjectSetMeta tests that SetMeta works
+			t.Run("TestObjectSetMeta", func(t *testing.T) {
+				skipIfNotOk(t)
+				newModTime := fstest.Time("2011-12-13T14:15:16.999999999Z")
+				obj := findObject(t, remote, file1.Path)
+				err := obj.SetMeta(newModTime, newModTime, nil)
+				if err == fs.ErrorCantSetMeta || err == fs.ErrorCantSetMetaWithoutDelete {
+					t.Log(err)
+					return
+				}
+				require.NoError(t, err)
+				file1.ModTime = newModTime
+				file1.CheckModTime(t, obj, obj.ModTime(), remote.Precision())
+				// And make a new object and read it from there too
+				TestObjectModTime(t)
+			})
+
+			// TestObjectSize tests that Size works
+			t.Run("TestObjectSize", func(t *testing.T) {
+				skipIfNotOk(t)
+				obj := findObject(t, remote, file1.Path)
+				assert.Equal(t, file1.Size, obj.Size())
+			})
+
 			// TestObjectStorable tests that Storable works
 			t.Run("ObjectStorable", func(t *testing.T) {
 				skipIfNotOk(t)
diff --git a/fstest/mockobject/mockobject.go b/fstest/mockobject/mockobject.go
index afeaad8a..75ae8618 100644
--- a/fstest/mockobject/mockobject.go
+++ b/fstest/mockobject/mockobject.go
@@ -49,6 +49,14 @@ func (o Object) ModTime() (t time.Time) {
 	return t
 }
 
+func (o Object) ChgTime() (t time.Time) {
+	return t
+}
+
+func (o Object) Meta() (m map[string]string) {
+	return m
+}
+
 // Size returns the size of the file
 func (o Object) Size() int64 { return 0 }
 
@@ -57,8 +65,8 @@ func (o Object) Storable() bool {
 	return true
 }
 
-// SetModTime sets the metadata on the object to set the modification date
-func (o Object) SetModTime(time.Time) error {
+// SetMeta sets the modification time of the local fs object
+func (o Object) SetMeta(modTime time.Time, chgTime time.Time, meta map[string]string) error {
 	return errNotImpl
 }
 
diff --git a/vfs/file.go b/vfs/file.go
index 966e0f4f..28035572 100644
--- a/vfs/file.go
+++ b/vfs/file.go
@@ -304,11 +304,11 @@ func (f *File) applyPendingModTime() error {
 		return errors.New("Cannot apply ModTime, file object is not available")
 	}
 
-	err := f.o.SetModTime(f.pendingModTime)
+	err := f.o.SetMeta(f.pendingModTime, f.pendingModTime, nil)
 	switch err {
 	case nil:
 		fs.Debugf(f.o, "File.applyPendingModTime OK")
-	case fs.ErrorCantSetModTime, fs.ErrorCantSetModTimeWithoutDelete:
+	case fs.ErrorCantSetMeta, fs.ErrorCantSetMetaWithoutDelete:
 		// do nothing, in order to not break "touch somefile" if it exists already
 	default:
 		fs.Errorf(f, "File.applyPendingModTime error: %v", err)
